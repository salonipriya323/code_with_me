{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "feb7f887",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number1\n",
      "Enter a number2\n",
      "Enter a number3\n",
      "Enter a number4\n",
      "Enter a number5\n",
      "Items:  [1, 2, 3, 4, 5]\n",
      "multiply:  [120]\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to multiply all the items in a list.\n",
    "I1=int(input(\"Enter a number\"))\n",
    "I2=int(input(\"Enter a number\"))\n",
    "I3=int(input(\"Enter a number\"))\n",
    "I4=int(input(\"Enter a number\"))\n",
    "I5=int(input(\"Enter a number\"))\n",
    "my_list=[I1,I2,I3,I4,I5]\n",
    "print(\"Items: \",my_list)\n",
    "mul=[I1*I2*I3*I4*I5]\n",
    "print(\"multiply: \",mul)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "39bf6e97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number5\n",
      "Enter a number2\n",
      "Enter a number7\n",
      "Enter a number3\n",
      "Enter a number9\n",
      "[5, 2, 7, 3, 9]\n",
      "[2, 3, 5, 7, 9]\n",
      "Largest:  9\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to get the largest number from a list.\n",
    "I1=int(input(\"Enter a number\"))\n",
    "I2=int(input(\"Enter a number\"))\n",
    "I3=int(input(\"Enter a number\"))\n",
    "I4=int(input(\"Enter a number\"))\n",
    "I5=int(input(\"Enter a number\"))\n",
    "my_list=[I1,I2,I3,I4,I5]\n",
    "print(my_list)\n",
    "my_list.sort()\n",
    "print(my_list)\n",
    "print(\"Largest: \",my_list.pop())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d02ab9dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a number8\n",
      "Enter a number9\n",
      "Enter a number2\n",
      "Enter a number6\n",
      "Enter a number4\n",
      "[8, 9, 2, 6, 4]\n",
      "[2, 4, 6, 8, 9]\n",
      "[9, 8, 6, 4, 2]\n",
      "smallest:  4\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to get the smallest number from a list.\n",
    "I1=int(input(\"Enter a number\"))\n",
    "I2=int(input(\"Enter a number\"))\n",
    "I3=int(input(\"Enter a number\"))\n",
    "I4=int(input(\"Enter a number\"))\n",
    "I5=int(input(\"Enter a number\"))\n",
    "my_list=[I1,I2,I3,I4,I5]\n",
    "print(my_list)\n",
    "my_list.sort()\n",
    "print(my_list)\n",
    "my_list.reverse()\n",
    "print(my_list)\n",
    "my_list.pop()\n",
    "print(\"smallest: \",my_list.pop())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8b59344e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write a Python program to check a list is empty or not.\n",
    "a=[]\n",
    "print(a)\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2a3bcabf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 4, 7, 12, 9, 14, 3, 6]\n",
      "[2, 4, 7, 12, 14, 6]\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to print a specified list after removing the 0th, 4th and 5th elements.\n",
    "a=[1,2,4,7,12,9,14,3,6]\n",
    "print(a)\n",
    "a.pop(0)\n",
    "a.pop(4)\n",
    "a.pop(5)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2e05cc2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 'Ram', 'Shyam', True, False, 22.7, 30.0)\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to create a tuple with different data types.\n",
    "a=(1,2,'Ram','Shyam',True,False,22.7,30.0)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "19e531bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to create a tuple with numbers and print one item.\n",
    "t=(1,6,3,8,9,2,)\n",
    "print(t[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5faf2739",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ram\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write a Python program to convert a tuple to a string.\n",
    "a=('Ram')\n",
    "print(a)\n",
    "type(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "7a06d061",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "#Write a Python program to get the 4th element and 4th element from last of a tuple.\n",
    "a=(1,2,8,4,7,3,9,5,6)\n",
    "print(a[4])\n",
    "print(a[-4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5884fbca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum:  [20]\n"
     ]
    }
   ],
   "source": [
    "#Write a Python function to sum all the numbers in a list. Go to the editor\n",
    "l=[8,2,3,0,7]\n",
    "sum=[l[0]+l[1]+l[2]+l[3]+l[4]]\n",
    "print(\"Sum: \",sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "cd74c77b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mul:  [-336]\n"
     ]
    }
   ],
   "source": [
    "#Write a Python function to multiply all the numbers in a list. Go to the editor\n",
    "l=[8,2,3,-1,7]\n",
    "mul=[l[0]*l[1]*l[2]*l[3]*l[4]]\n",
    "print(\"mul: \",mul)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "17527311",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum upto number: 5\n",
      "Sum:  15.0\n"
     ]
    }
   ],
   "source": [
    "#Calculate the sum of all numbers from 1 to a given number\n",
    "n=int(input(\"Sum upto number: \"))\n",
    "sum=n*(n+1)/2\n",
    "print(\"Sum: \",sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ef1bd77",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculate the sum of all numbers from 1 to a given number\n",
    "n=int(input(\"Sum upto number: \"))\n",
    "for s in range(1,n):\n",
    "    sum=n*(n+1)/2\n",
    "    print(\"Sum: \",sum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0855ef6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11149262",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
